#sha256sum (sha256sum file should be edited with our fastq.gz path)
sha256sum -c /path/to/sha256sum_file


#hpc account_free space
du -h --max-depth=1


Installation of required softwares

1) FastQC
wget https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.12.1.zip
unzip fastqc_v0.12.1.zip

3) Trimmomatic
wget https://github.com/usadellab/Trimmomatic/files/5854859/Trimmomatic-0.39.zip
unzip Trimmomatic-0.39.zip

5) Burrows-Wheeler Aligner
git clone https://github.com/lh3/bwa.git
cd bwa; make

7) Samtools and htslib suit, You don’t hae to get the htslib separately.
wget https://github.com/samtools/samtools/releases/download/1.18/samtools-1.18.tar.bz2

#If you want to build samtools with the tview functionality, you need to install the ncurses development packages.
sudo apt-get install libncurses5-dev libncursesw5-dev

tar -xvjf samtools-1.18.tar.bz2 && cd samtools-1.18
./configure --prefix=/your/soft/path/name/
make
make install
export PATH="/your/soft/path/name/samtools-1.18/bin:$PATH"

5) Picard Tools
git clone https://github.com/broadinstitute/picard.git
cd picard
./gradlew shadowJar

7) Bioawk
sudo git clone https://github.com/lh3/bioawk.git
cd bioawk/
sudo make
./bioawk

9) BCFTools
wget https://github.com/samtools/bcftools/releases/download/1.10.2/bcftools-1.10.2.tar.bz2
tar -xjvf bcftools-1.10.2.tar.bz2
cd bcftools-1.10.2
make
sudo make prefix=/usr/local/bin install
sudo ln -s /usr/local/bin/bin/bcftools /usr/bin/bcftools # you don't technically need to do this. And if you aren't a root user you may get a ``permission denied`` message - don't worry about it.

10) PSMC
git clone https://github.com/lh3/psmc.git
cd psmc
make
cd utils
make

11) R and R-Studio
Download R first - For Machttps://cran.r-project.org/bin/macosx/
For Windows : https://cran.r-project.org/bin/windows/base/

Now Download R-Studio. R-Studio is an IDE which helps you access R interactively. Alternatively you can use any other IDE like VS Code. Download the R-Studio - https://posit.co/download/rstudio-desktop/

12) Install seqtk
git clone https://github.com/lh3/seqtk.git;
cd seqtk; make

#Subsample 10000 read pairs from two large paired FASTQ files (remember to use the same random seed to keep pairing):
  seqtk sample -s100 RWB_R1_paired.fq.gz 17200000 | gzip > RWB_R1_5g_1.fq.gz
  seqtk sample -s100 RWB_R2_paired.fq.gz 17200000 | gzip > RWB_R2_5g_1.fq.gz
  

#Trimming
java -jar /home/jagativishwa/softs/Trimmomatic-0.39/trimmomatic-0.39.jar PE \
  -phred33 -threads 40 -trimlog bof_trim.log -summary bof_summary.txt \
  BOF_R1.fastq.gz BOF_R2.fastq.gz \
  bof_R1_paired.fq.gz bof_R1_unpaired.fq.gz \
  bof_R2_paired.fq.gz bof_R2_unpaired.fq.gz \
  ILLUMINACLIP:/home/jagativishwa/softs/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True LEADING:3 TRAILING:3 MINLEN:36


#Trimming.sh (qsub/qdel/qstat/freenodes)
#PBS -N trim-1
#PBS -q iiser
#PBS -l select=1:ncpus=40,pmem=188
#PBS -V
#PBS -l walltime=128:00:00
#PBS -o bof_trim-1.o
#PBS -e bof_trim-1.err
#PBS -m abe
#PBS -M vishwajagati@labs.iisertirupati.ac.in

/home/app/jre1.8.0_241-amd64/bin/java -jar /home/jagativishwa/softs/Trimmomatic-0.39/trimmomatic-0.39.jar PE \
  -phred33 -threads 40 -trimlog /home/jagativishwa/raw/NS_trim.log -summary /home/jagativishwa/raw/NS_summary.txt \
  /home/jagativishwa/raw/NS_R1.fastq.gz /home/jagativishwa/raw/NS_R2.fastq.gz \
  /home/jagativishwa/raw/NS_R1_paired.fq.gz /home/jagativishwa/raw/NS_R1_unpaired.fq.gz \
  /home/jagativishwa/raw/NS_R2_paired.fq.gz /home/jagativishwa/raw/NS_R2_unpaired.fq.gz \
  ILLUMINACLIP:/home/jagativishwa/softs/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10:2:True LEADING:3 TRAILING:3 MINLEN:36


#Before we start mapping the data, we need to index the reference
/mnt/d/vishwa/psmc/softs/bwa/bwa index /mnt/e/psmc/mapping/RWB/RWB_ref.fna


#mapping
 ~/softs/bwa/bwa mem -M -t 20 -R "@RG\tID:JO_30x\tSM:JO_\tLB:IlluminaWGS\tPL:ILLUMINA" GCA_013401195.1_ASM1340119v1_genomic.fna ../ISB_R1_paired.fq.gz ../ISB_R2_paired.fq.gz | /mn
t/d/Vishwa/psmc/softs/samtools-1.18/bin/samtools view -bh - | /mnt/d/Vishwa/psmc/softs/samtools-1.18/bin/samtools sor
t -T tmp -o /mnt/f/PSMC/mapping/ISB/ISB_ref.bam



#filter based on quality filter
/mnt/d/vishwa/psmc/softs/samtools-1.18/bin/samtools view \
                 -bh \
                 -F 4 \
                 -q 30 \
                 -o RWB_5g_1_filtered.bam \
                 ./RWB_5g_1_ref.bam

#sort the filtered bam
/mnt/d/vishwa/psmc/softs/samtools-1.18/bin/samtools sort \
              -o RWB_5g_1_filtered_sorted.bam \
              -T RWB_5g_1_filtered_temp \
              ./RWB_5g_1_filtered.bam

#remove PCR Duplicates
java -jar -Xmx8g -jar /mnt/d/vishwa/psmc/softs/picard/build/libs/picard.jar MarkDuplicates \
    MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=900 \
    INPUT=RWB_5g_1_filtered_sorted.bam \
    OUTPUT=RWB_5g_1_filtered_sorted_rmdup.bam \
    ASSUME_SORTED=TRUE \
    REMOVE_DUPLICATES=true \
    METRICS_FILE=RWB_5g_1.rmdup.metrix.txt \
    TMP_DIR=./ \
    VALIDATION_STRINGENCY=SILENT


#Index the final bam
/mnt/d/vishwa/psmc/softs/samtools-1.18/bin/samtools index RWB_5g_1_filtered_sorted_rmdup.bam


#BAMQC
/home/jagativishwa/softs/qualimap_v2.3/qualimap bamqc -bam  /home/jagativishwa/psmc/RWB/RWB_10g_2_filtered_sorted_rmdup.bam --java-mem-size=4G

**#If the ref is not chromosome level, the following are the steps!!
#Length of each scaffold of the reference file
/mnt/d/vishwa/psmc/softs/bioawk/bioawk -c fastx '{print ">" $name ORS length($seq)}' RWB_ref.fna | paste - - > length_of_each_scaffold_of_RWB_5g_1_ref.txt

#01_blastdb.sh
/mnt/d/vishwa/psmc/softs/blast-2.14.1/bin/makeblastdb -in zf_ref.fna -parse_seqids -dbtype nucl -out ./ZF_all_chrom.db -blastdb_version 4 > mkblastdb_zf_all.out

#02_blast_assembly_to_ZF.sh
/mnt/d/vishwa/psmc/softs/ncbi-blast-2.14.1+/bin/blastn -db sex_chromosomes/ZF_all_chrom.db -query RWB_ref.fna -max_target_seqs 5 -max_hsps 1 -evalue 1e-10 -outfmt "7 qseqid sseqid pident length qcovs qlen qstart qend evalue bitscore" -out ./Blast_RWB_to_ZF_db.out.txt

**03_summarise_Blast.sh
#TOTAL SCAFFOLDS BLASTED

TOT_SCAFS=`grep "Query" Blast_RWB_to_ZF_db.out.txt | wc -l`

#QUERIES THAT FOUND ONE OR MORE HITS

HIT_SCAFS=`grep -v ^"#" Blast_RWB_to_ZF_db.out.txt | awk '{print $1}' | sort -n | uniq | wc -l`

echo "Total Queries BLASTED is -" ${TOT_SCAFS} "; Queries with at least 1 hit are -" ${HIT_SCAFS} >> Blast_summary.txt

echo "Specifics for queries with hits -" >> Blast_summary.txt

echo "All top hit values are only given for Pident >=80" >> Blast_summary.txt

echo "NC_SCAF" "Q_LEN" "NUM_HITS" "HITS_>80_P-IDENT" "BEST_HIT_By_P-IDENT" "BEST_HIT_By_QCov" "BEST_HIT-BY_QCov_QCov" "BEST_HIT-BY_QCov_LEN" "SAME_BEST_HIT-Y/N" "DIFF_NEXT_BEST_P-IDENT"  >> Blast_summary.txt

# This next bit will be done for each unique query in the concatenated BLAST output file

for SCAF in `cut -f1 Blast_RWB_to_ZF_db.out.txt | grep -v ^"#" | sort -n | uniq`
do
	hits=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | wc -l`
	Qlen=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | cut -f6 | awk 'NR==1'`
	Hits_80_PI=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | wc -l` 
        Best_Hit_By_Pident=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | sort -rnk3,3 | awk '{if(NR==1) print $2 }'`
        Best_Hit_By_QCov=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | sort -rnk5,5 | awk '{if(NR==1) print $2 }'`
	Best_Hit_By_QCov_QCov=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | sort -rnk5,5 | awk '{if (NR==1) print $5}'`
	Best_Hit_By_QCov_Len=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | sort -rnk5,5 | awk '{if (NR==1) print $4 }'`

        if [[ $Best_Hit_By_Pident == $Best_Hit_By_QCov ]]; then SAME=Y; else SAME=N; fi

	NEXT_BEST_Pident=`grep -w ^${SCAF} Blast_RWB_to_ZF_db.out.txt | awk '$3>=80' | sort -rnk3,3 | cut -f3 | awk '{if (NR==2) {print $1-a} a=$1}'`
        echo ${SCAF} ${Qlen} ${hits} ${Hits_80_PI} ${Best_Hit_By_Pident} ${Best_Hit_By_QCov} ${Best_Hit_By_QCov_QCov} ${Best_Hit_By_QCov_Len} ${SAME} ${NEXT_BEST_Pident} >> Blast_summary.txt
done


**#04_query_cover_hit_filter.sh
awk '$6 ~ /NC_044241.2/ {print $1}' Blast_summary.txt > Blast_scaffolds_list_Z_chr.txt

awk '$6 ~ /NC_045028.1/ {print $1}' Blast_summary.txt > Blast_scaffolds_list_W_chr.txt

cat Blast_scaffolds_list_Z_chr.txt Blast_scaffolds_list_W_chr.txt > Blast_scaffolds_list_ZW_chr.txt


**#05_identifying_sex_scaffs.sh
#to extract the header lines 
grep -e ">" /Users/vinaykl/EBB/ref/ncbi_dataset/data/GCA_009812075.1/GCA_009812075.1_Ss_LA_1.0_genomic.fna > all_scaffs_header_Ss.txt

#to get only the scaffold name
cat all_scaffs_header_Ss.txt | awk '{print $1}' > all_scaffs_latest_Ss.txt

#subtract the Z and W hit from overall list
grep -v -w -f ./Blast_scaffolds_list_ZW_chr.txt all_scaffs_latest_Ss.txt > only_aut_scaff_list.txt

# add scaff length to only aut scaff list
grep -w -f only_aut_scaff_list.txt length_of_each_scaffold_of_Ss_ref.txt > only_aut_scaffs.txt

# create bed file with only aut chromosomes
sed 's,\t,\t0\t,' only_aut_scaffs.txt > aut_chrom_scaff_btg.bed

# for removing '>' from the above bed file
sed 's/^.//' aut_chrom_scaff_RWB.bed > autosomal_chromosome.bed



**#Identifying sex-linked chromosome_if chromosome level ref
#Lets get the length of each scaffold of the reference file
~/soft/bioawk -c fastx '{print ">" $name ORS length($seq)}' ~/PSMC_Tut/mapping/Athene_cunicularia.athCun1.dna.toplevel.fa | paste - - > length_of_each_scaffold_of_ath_cun_ensembl.txt

#Now lets isolate the Z Chromosome scaffolds in to a text file
less ./GCA_003259725.1_sequence_report.txt| grep 'Chromosome' | grep 'chrZ' > chromosome_scaffolds_Z.txt

#Now lets isolate the Autosomal Chromosome scaffolds in to a text file
less ./GCA_003259725.1_sequence_report.txt| grep 'Chromosome' | grep -v 'chrZ' > chromosome_scaffolds_aut.txt

#For downstream analysis we need to bed files. Please learn more about bed formats

cut -f1 chromosome_scaffolds_Z.txt | grep -f - length_of_each_scaffold_of_ath_cun_ensembl.txt | sed 's,>,,' | sed 's,\.1,\.1\t0,' > chromosome_scaffolds_Z.bed

cut -f1 chromosome_scaffolds_aut.txt | grep -f - length_of_each_scaffold_of_ath_cun_ensembl.txt | sed 's,>,,' | sed 's,\.1,\.1\t0,' > chromosome_scaffolds_aut.bed


#Retain data mapping only to Autosomal chromosomes from the reference
/mnt/d/vishwa/psmc/softs/samtools-1.18/bin/samtools view -b -L autosomal_chromosome_RWB.bed RWB_5g_1_filtered_sorted_rmdup.bam > RWB_5g_1_filtered_sorted_rmdup_aut.bam

#Creating consensus file
/usr/local/bin/bin/bcftools mpileup -C50 -f ~/PSMC_Tut/mapping/Athene_cunicularia.athCun1.dna.toplevel.fa ./JO_filtered_sorted_rmdup_aut.bam | /usr/local/bin/bin/bcftools call -c - | /usr/local/bin/bin/vcfutils.pl vcf2fq -d 10 -D 100 | gzip > JO_diploid.fq.gz

#Let us first convert the diploid genome to PSMC suitable format ``psmcfa``
/home/app/psmc-master/utils/fq2psmcfa -q20 /home/jagativishwa/psmc/RWB/RWB_20g_diploid.fq.gz > RWB_20g_diploid.psmcfa 

Running PSMC to get initial idea about how the parameters is panning out.
/home/app/psmc-master/psmc -N25 -t9 -r5 -p "26*2+4+7+1" -o /home/jagativishwa/psmc/RWB/RWB_20g_diploid.psmc /home/jagativishwa/psmc/RWB/RWB_20g_diploid.psmcfa

#Lets get something called PSMC History
/home/app/psmc-master/utils/psmc2history.pl /home/jagativishwa/psmc/RWB/RWB_20g_diploid.psmc | /home/app/psmc-master/utils/history2ms.pl > ms-cmd-10_2.sh

#Bootstrapping PSMC
/home/app/psmc-master/utils/splitfa /home/jagativishwa/psmc/RWB/RWB_10g_2_diploid.psmcfa > /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_split.psmcfa

seq 100 | parallel -j 40 "/home/app/psmc-master/psmc -N25 -t9 -r5 -b -p '26*2+4+7+1' -o /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_round-{}.psmc /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_split.psmcfa"

cat /home/jagativishwa/psmc/RWB/RWB_10g_2_diploid.psmc /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_round-*.psmc > /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_combined.psmc

#final text output
/home/app/psmc-master/utils/psmc_plot.pl -S -R -u 7.33e-09 -g 2.58 /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_no_scaling /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid.psmc
/home/app/psmc-master/utils/psmc_plot.pl -R -u 7.33e-09 -g 2.58 -pY50000 /home/jagativishwa/psmc/RWB/boots/final_output/RWB_10g_2_diploid /home/jagativishwa/psmc/RWB/boots/RWB_10g_2_diploid_combined.psmc



##coverting to unix format
sed -i 's/\r//' /home/jagativishwa/commands/03_summarise_Blast.sh
